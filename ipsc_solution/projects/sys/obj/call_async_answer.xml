<?xml version="1.0" encoding="utf-8"?>
<root>
  <FlowItem>
    <FlowID>call_async_answer</FlowID>
    <FlowName>call_async_answer</FlowName>
    <FlowDesc />
    <FlowVer>1.0</FlowVer>
    <CreateDate>2016-06-25T15:33:37+08:00</CreateDate>
    <ModifyDate>2016-06-27T03:17:59+08:00</ModifyDate>
    <DesignVer>2.0</DesignVer>
  </FlowItem>
  <FlowNode>
    <NodeID>1831</NodeID>
    <NodeType>SUBSTART</NodeType>
    <NodeName>子流程开始</NodeName>
    <ExtendedProperty>
    </ExtendedProperty>
    <PropertySet>
      <AffectList>
        <varlist>
          <var>sender</var>
        </varlist>
        <varlist>
          <var>id_</var>
        </varlist>
        <varlist>
          <var>res_id</var>
        </varlist>
        <varlist>
          <var>params</var>
        </varlist>
      </AffectList>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1832</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1832</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=error = None
begin_time = now()
#
call_map = _gd_['call_map'] # chan =&gt; call_info
conf_map = _gd_['conf_map'] # res_id =&gt; call_info
call_map_r = _gd_['call_map_r'] # res_id =&gt; call_info
conf_map_r = _gd_['conf_map_r'] # res_id -&gt; conf_info
#
call_info = call_map_r[res_id]
chan = call_info['chan']
#
org_state = call_info['state']
call_info['state'] = 'Answer'
#    
SendAcceptCall(chan)
ret_val = AsynchInvoke(WaitCallStatus(chan, 5000, 0, [2]))
if ret_val[0] &lt; 1:
    error = RuntimeError('WaitCallStatus(status=1xx) returns error value %s, %s' % ret_val)
    raise error
SendANS(chan, 1)
ret_val = AsynchInvoke(WaitCallStatus(chan, 5000, 0, [3,4]))
if ret_val[0] &lt; 1:
    error = RuntimeError('WaitCallStatus(states=2xx) returns error value  %s, %s' % ret_val)
    raise error
# Answer OK!!!
call_info['state'] = 'Idle'
# return !
try:
	jsonrpc.send_method(
		method='call.on_answer_completed',
		params={
			'res_id': res_id,
			'error': None,
			'begin_time': begin_time,
			'end_time': now(),
		}
	)
except IvrError as err:
	error = err
	TraceErr(err)
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1853</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1856</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1848</NodeID>
    <NodeType>SUBEND</NodeType>
    <NodeName>子流程结束</NodeName>
    <ExtendedProperty>IsHangup=1</ExtendedProperty>
    <PropertySet>
      <EffectList />
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1853</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 error</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=call_info['state'] = org_state
if not isinstance(error, IvrError):
	try:
		if not error:
			error = 'Un-catchable answer error.'
		jsonrpc.send_method(
			method='call.on_answer_completed',
			params={
				'res_id': res_id,
				'error': error,
				'begin_time': begin_time,
				'end_time': now(),
			}
		)
	except IvrError as err:
		TraceErr(err)</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1856</NodeID>
    <NodeType>JUDGE</NodeType>
    <NodeName>判断 not error</NodeName>
    <ExtendedProperty>
    </ExtendedProperty>
    <PropertySet>
      <switch>
        <case>
          <expression>not bool(error)</expression>
          <ExitType>101</ExitType>
        </case>
      </switch>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>101</type>
          <targetflow>
          </targetflow>
          <target>1848</target>
        </ExitPort>
        <ExitPort>
          <type>100</type>
          <targetflow>
          </targetflow>
          <target>1853</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
</root>