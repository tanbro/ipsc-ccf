<?xml version="1.0" encoding="utf-8"?>
<root>
  <FlowItem>
    <FlowID>conf</FlowID>
    <FlowName>conf</FlowName>
    <FlowDesc />
    <FlowVer>1.0</FlowVer>
    <CreateDate>2016-06-12T14:00:57+08:00</CreateDate>
    <ModifyDate>2017-01-12T14:05:38+08:00</ModifyDate>
    <DesignVer>2.0</DesignVer>
  </FlowItem>
  <FlowNode>
    <NodeID>1367</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf init</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None

res_id = None
chan = None
conf_id = None

call_map = _gd_['call_map'] # chan =&gt; call_info
conf_map = _gd_['conf_map'] # conf_id =&gt; conf_info

call_map_r = _gd_['call_map_r'] # res_id =&gt; call_info
conf_map_r = _gd_['conf_map_r'] # res_id -&gt; conf_info

Trace('sys.conf.initiated')
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>2023</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1404</NodeID>
    <NodeType>JUDGE</NodeType>
    <NodeName>判断 method</NodeName>
    <ExtendedProperty>
    </ExtendedProperty>
    <PropertySet>
      <switch>
        <case>
          <expression>method == 'conf.release'</expression>
          <ExitType>101</ExitType>
        </case>
        <case>
          <expression>method == 'conf.play_start'</expression>
          <ExitType>102</ExitType>
        </case>
        <case>
          <expression>method == 'conf.play_stop'</expression>
          <ExitType>103</ExitType>
        </case>
        <case>
          <expression>method == 'conf.record_start'</expression>
          <ExitType>107</ExitType>
        </case>
        <case>
          <expression>method == 'conf.record_stop'</expression>
          <ExitType>108</ExitType>
        </case>
        <case>
          <expression>method == 'conf.set_part_voice_mode'</expression>
          <ExitType>104</ExitType>
        </case>
        <case>
          <expression>method == 'conf.exists'</expression>
          <ExitType>105</ExitType>
        </case>
        <case>
          <expression>method == 'conf.get_parts'</expression>
          <ExitType>106</ExitType>
        </case>
      </switch>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>101</type>
          <targetflow>
          </targetflow>
          <target>1389</target>
        </ExitPort>
        <ExitPort>
          <type>102</type>
          <targetflow>
          </targetflow>
          <target>1432</target>
        </ExitPort>
        <ExitPort>
          <type>103</type>
          <targetflow>
          </targetflow>
          <target>1440</target>
        </ExitPort>
        <ExitPort>
          <type>107</type>
          <targetflow>
          </targetflow>
          <target>2009</target>
        </ExitPort>
        <ExitPort>
          <type>108</type>
          <targetflow>
          </targetflow>
          <target>2015</target>
        </ExitPort>
        <ExitPort>
          <type>104</type>
          <targetflow>
          </targetflow>
          <target>1902</target>
        </ExitPort>
        <ExitPort>
          <type>105</type>
          <targetflow>
          </targetflow>
          <target>1949</target>
        </ExitPort>
        <ExitPort>
          <type>106</type>
          <targetflow>
          </targetflow>
          <target>1957</target>
        </ExitPort>
        <ExitPort>
          <type>100</type>
          <targetflow>
          </targetflow>
          <target>1406</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1406</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 invalid method</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=jsonrpc.send_error(sender, id_, message='invalid method')

</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1426</NodeID>
    <NodeType>SUBSTART</NodeType>
    <NodeName>子流程开始</NodeName>
    <ExtendedProperty>
    </ExtendedProperty>
    <PropertySet>
      <AffectList>
        <varlist>
          <var>sender</var>
        </varlist>
        <varlist>
          <var>id_</var>
        </varlist>
        <varlist>
          <var>params</var>
        </varlist>
      </AffectList>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1367</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1383</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 Delay</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=Trace('&gt;&gt;&gt; AsynchDelay(title=%s)' % res_id)
ret_val = AsynchInvoke(Delay(60000, True, conf_id, -1, "BusNotifyTitle=%s" % res_id))
Trace('&lt;&lt;&lt; AsynchDelay(title=%s)' % res_id)
err, data = ret_val
if err == -8:
	Trace('DELAY: timeout')
elif err == -61:
	Trace('DELAY: conf no-logner exits')
elif err != 1:
	TraceErr('Delay error %s: %s' % (err, data))
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1414</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1414</NodeID>
    <NodeType>JUDGE</NodeType>
    <NodeName>判断 Delay returns</NodeName>
    <ExtendedProperty>
    </ExtendedProperty>
    <PropertySet>
      <switch>
        <case>
          <expression>err == 1</expression>
          <ExitType>101</ExitType>
        </case>
        <case>
          <expression>err == -61</expression>
          <ExitType>102</ExitType>
        </case>
      </switch>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>101</type>
          <targetflow>
          </targetflow>
          <target>1416</target>
        </ExitPort>
        <ExitPort>
          <type>102</type>
          <targetflow>
          </targetflow>
          <target>2035</target>
        </ExitPort>
        <ExitPort>
          <type>100</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1416</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 parse data</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=sender, id_, method, params = json.loads(data)
if method.startswith('sys.'):
	method = method[4:]</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1404</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>2035</NodeID>
    <NodeType>SUBEND</NodeType>
    <NodeName>子流程结束</NodeName>
    <ExtendedProperty>IsHangup=</ExtendedProperty>
    <PropertySet>
      <EffectList />
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1372</NodeID>
    <NodeType>CREATECONFEX</NodeType>
    <NodeName>创建会议组</NodeName>
    <ExtendedProperty>ConfID=;CreateMode=0;ConfMode=1;IsAutoDele=1;ConfTimeOut=max_seconds;ReallocResNum=0;PlayFile=bg_file;PlayMode=1;IsRecord=1;RecordFile=record_file;RecFormat=3;Option="NotUseTimeout=180";OutConfID=conf_id;DeleConfLimitType=0;DeleConfLimit=parts_threshold</ExtendedProperty>
    <PropertySet>
      <Events>
        <EventList>
          <EventID>1</EventID>
          <EventType>28</EventType>
          <Value>
          </Value>
          <Mode>0</Mode>
          <SubFlowID>"conf_released"</SubFlowID>
          <Param>
          </Param>
        </EventList>
        <EventList>
          <EventID>4</EventID>
          <EventType>26</EventType>
          <Value>
          </Value>
          <Mode>0</Mode>
          <SubFlowID>'conf_play_completed'</SubFlowID>
          <Param>
          </Param>
        </EventList>
        <EventList>
          <EventID>5</EventID>
          <EventType>27</EventType>
          <Value>
          </Value>
          <Mode>0</Mode>
          <SubFlowID>'conf_record_completed'</SubFlowID>
          <Param>
          </Param>
        </EventList>
        <EventList>
          <EventID>6</EventID>
          <EventType>24</EventType>
          <Value>
          </Value>
          <Mode>0</Mode>
          <SubFlowID>'conf_entered'</SubFlowID>
          <Param>
          </Param>
        </EventList>
        <EventList>
          <EventID>7</EventID>
          <EventType>25</EventType>
          <Value>
          </Value>
          <Mode>0</Mode>
          <SubFlowID>'conf_exited'</SubFlowID>
          <Param>
          </Param>
        </EventList>
      </Events>
      <Exit>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1373</target>
        </ExitPort>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1374</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1373</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.create ok return</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=begin_time = now()

res_id = '%s.%s' % (utils.make_res_id(), str(conf_id))
Trace('sys.conf.construct: ok res_id=%s' % res_id)

conf_info = conf_map[conf_id] = conf_map_r[res_id] = {
	'id': id_,
	'res_id': res_id, 
	'conf_id': conf_id,
	'begin_time': begin_time,
	'end_time': None,
	'parts': [],
	'playing': False,
	'recording': False,
	'user_data': params.get('user_data'),
}

if record_file:
	conf_info['recording'] = True
	conf_info['record_file'] = record_file
	conf_info['record_begin_time'] = now()

jsonrpc.send_result(sender, id_, {
	'res_id': res_id
})
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1374</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.create error result</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=TraceErr('sys.call.construct: error={}'.format(last_err))
jsonrpc.send_error(sender, id_, message='{}'.format(last_err))
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>2023</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 创建会议</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = ''
try:
	Trace('sys.conf.construct: params={}'.format(params))
	max_seconds = int(params['max_seconds'])
	record_file = str(params.get('record_file') or '')
	bg_file = str(params.get('bg_file') or '')
	parts_threshold = abs(int(params.get('parts_threshold', 1)))
except Exception as err:
	last_err = err
	raise
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1374</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1372</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1389</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.release</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=
try:
	result = DeleConf(conf_id)
	if result &lt; 1:
		raise IvrError(0, 'DeleConf(%s) error %d' % (conf_id, result))
	try:
		jsonrpc.send_result(sender, id_)
	except IvrError as err:
		TraceErr(err)
except Exception as err:
	jsonrpc.send_error(sender, id_, message='{}'.format(err))
	raise
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1432</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.play_start</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=try:
	if conf_info['playing']:
		raise IvrError(0, 'Can not StartConfPlay while another playing is active.')

	playdata = []

	try:
		content = params['content']
	except KeyError:
		try:
			content = str(params['file'])
		except KeyError:
			raise KeyError('"content" or "file" key not found.')

	if isinstance(content, str):
		playdata.append([content, 0, ''])
	elif isinstance(content, (list, tuple)):
		for item in content[:30]:
			if len(item) == 1:
				item.extend([0, ''])
			elif len(item) == 2:
				item.append('')
			elif item[2] is None:
				item[2] = ''
			playdata.append([str(item[0]), int(item[1]), str(item[2])])

	conf_play_mode = int(bool(params.get('is_loop', False)))

	Trace("StartConfPlay(confid={}, playdata={}, mode={})".format(conf_id, playdata, conf_play_mode))
	ret = StartConfPlay(conf_id, playdata, 0, conf_play_mode)
	if ret &lt; 0:
		raise IvrError(0, 'StartConfPlay(%s) returns %s' % (conf_id, ret))
	else:
		conf_info['playing'] = True
		conf_info['play_begin_time'] = now()

	try:
		jsonrpc.send_result(sender, id_)
	except IvrError as err:
		TraceErr(err)
except Exception as err:
	jsonrpc.send_error(sender, id_, message='{}'.format(err))
	raise
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1440</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.play_stop</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=try:
	StopConfPlay(conf_id)
	try:
		jsonrpc.send_result(sender, id_)
	except IvrError as err:
		TraceErr(err)
except Exception as err:
	jsonrpc.send_error(sender, id_, message='{}'.format(err))
	raise
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>2009</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.record_start</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=
try:
	if conf_info['recording']:
		raise IvrError(0, 'Can not StartConfRecord while another recording is active.')

	record_file = str(params['record_file'])

	StartConfRecord(
		confid=conf_id,
		rec_file=record_file,
		format=3,
		reclen=int(params['max_seconds']),
		pindex=0
	)

	conf_info['recording'] = True
	conf_info['record_file'] = record_file
	conf_info['record_begin_time'] = now()

	try:
		jsonrpc.send_result(sender, id_)
	except IvrError as err:
		TraceErr(err)

except Exception as err:
	jsonrpc.send_error(sender, id_, message='{}'.format(err))
	raise
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>2015</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.record_stop</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=
try:
	StopConfRecord(conf_id)
	conf_info['recording'] = False
	try:	
		jsonrpc.send_result(sender, id_)
	except IvrError as err:
		TraceErr(err)
except Exception as err:
	jsonrpc.send_error(sender, id_, message='{}'.format(err))
	raise
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1902</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>set_part_voice_mode</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=
try:
	call_info = call_map_r[params['call_res_id']]
	chan = call_info['chan']
	voice_mode = int(params['mode'])
	ChangeConferMode(conf_id, chan, voice_mode)

	try:
		jsonrpc.send_result(sender, id_)
	except IvrError as err:
		TraceErr(err)

except Exception as err:
	jsonrpc.send_error(sender, id_, message='{}'.format(err))
	raise
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1949</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>exists</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
	result = params['res_id'] in conf_map_r
	try:
		jsonrpc.send_result(sender, id_, result)
	except IvrError as err:
		TraceErr(err)
except Exception as err:
	jsonrpc.send_error(sender, id_, message='{}'.format(err))
	raise
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1957</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>get_parts</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=
try:
	result = conf_info['parts']
	try:
		jsonrpc.send_result(sender, id_, result)
	except IvrError as err:
		TraceErr(err)
except Exception as err:
	jsonrpc.send_error(sender, id_, message='{}'.format(err))
	raise
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
</root>