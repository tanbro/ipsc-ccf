<?xml version="1.0" encoding="utf-8"?>
<root>
  <FlowItem>
    <FlowID>conf</FlowID>
    <FlowName>conf</FlowName>
    <FlowDesc />
    <FlowVer>1.0</FlowVer>
    <CreateDate>2016-06-12T14:00:57+08:00</CreateDate>
    <ModifyDate>2016-06-27T03:17:59+08:00</ModifyDate>
    <DesignVer>2.0</DesignVer>
  </FlowItem>
  <FlowNode>
    <NodeID>1367</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf init</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None

res_id = None
chan = None
conf_id = None

call_map = _gd_['call_map'] # chan =&gt; call_info
conf_map = _gd_['conf_map'] # conf_id =&gt; conf_info

call_map_r = _gd_['call_map_r'] # res_id =&gt; call_info
conf_map_r = _gd_['conf_map_r'] # res_id -&gt; conf_info
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1372</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1404</NodeID>
    <NodeType>JUDGE</NodeType>
    <NodeName>判断 method</NodeName>
    <ExtendedProperty>
    </ExtendedProperty>
    <PropertySet>
      <switch>
        <case>
          <expression>method == 'conf.release'</expression>
          <ExitType>101</ExitType>
        </case>
        <case>
          <expression>method == 'conf.play_start'</expression>
          <ExitType>102</ExitType>
        </case>
        <case>
          <expression>method == 'conf.play_stop'</expression>
          <ExitType>103</ExitType>
        </case>
        <case>
          <expression>method == 'conf.set_part_voice_mode'</expression>
          <ExitType>104</ExitType>
        </case>
        <case>
          <expression>method == 'conf.exists'</expression>
          <ExitType>105</ExitType>
        </case>
        <case>
          <expression>method == 'conf.get_parts'</expression>
          <ExitType>106</ExitType>
        </case>
      </switch>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>101</type>
          <targetflow>
          </targetflow>
          <target>1389</target>
        </ExitPort>
        <ExitPort>
          <type>102</type>
          <targetflow>
          </targetflow>
          <target>1432</target>
        </ExitPort>
        <ExitPort>
          <type>103</type>
          <targetflow>
          </targetflow>
          <target>1440</target>
        </ExitPort>
        <ExitPort>
          <type>104</type>
          <targetflow>
          </targetflow>
          <target>1902</target>
        </ExitPort>
        <ExitPort>
          <type>105</type>
          <targetflow>
          </targetflow>
          <target>1949</target>
        </ExitPort>
        <ExitPort>
          <type>106</type>
          <targetflow>
          </targetflow>
          <target>1957</target>
        </ExitPort>
        <ExitPort>
          <type>100</type>
          <targetflow>
          </targetflow>
          <target>1406</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1406</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 invalid method</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
	jsonrpc.send_error(id_)
except IvrError as err:
	TraceErr(err)
	last_err = err
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1426</NodeID>
    <NodeType>SUBSTART</NodeType>
    <NodeName>子流程开始</NodeName>
    <ExtendedProperty>
    </ExtendedProperty>
    <PropertySet>
      <AffectList>
        <varlist>
          <var>sender</var>
        </varlist>
        <varlist>
          <var>id_</var>
        </varlist>
        <varlist>
          <var>params</var>
        </varlist>
      </AffectList>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1367</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1383</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 Delay</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=ret_val = AsynchInvoke(Delay(15000, False, 0, -1, "BusNotifyTitle=%s" % res_id))
err, data = ret_val
if err == -8:
	pass
elif err != 1:
	TraceErr('Delay error %s: %s' % (err, data))
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1414</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1414</NodeID>
    <NodeType>JUDGE</NodeType>
    <NodeName>判断 Delay returns</NodeName>
    <ExtendedProperty>
    </ExtendedProperty>
    <PropertySet>
      <switch>
        <case>
          <expression>err == 1</expression>
          <ExitType>101</ExitType>
        </case>
      </switch>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>101</type>
          <targetflow>
          </targetflow>
          <target>1416</target>
        </ExitPort>
        <ExitPort>
          <type>100</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1416</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 parse data</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=sender, id_, method, params = json.loads(data)</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1404</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1427</NodeID>
    <NodeType>JUDGE</NodeType>
    <NodeName>判断 is conf exists</NodeName>
    <ExtendedProperty>
    </ExtendedProperty>
    <PropertySet>
      <switch>
        <case>
          <expression>IsExistConf(conf_id)</expression>
          <ExitType>101</ExitType>
        </case>
      </switch>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
        <ExitPort>
          <type>101</type>
          <targetflow>
          </targetflow>
          <target>1383</target>
        </ExitPort>
        <ExitPort>
          <type>100</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1372</NodeID>
    <NodeType>CREATECONFEX</NodeType>
    <NodeName>创建会议组</NodeName>
    <ExtendedProperty>ConfID=;CreateMode=0;ConfMode=1;IsAutoDele=1;ConfTimeOut=int(params['max_seconds']);ReallocResNum=0;PlayFile=str(params.get('bg_file') or '');PlayMode=1;IsRecord=0;RecordFile=;RecFormat=3;Option=;OutConfID=conf_id;DeleConfLimitType=0;DeleConfLimit=int(params.get('parts_threshold', 1))</ExtendedProperty>
    <PropertySet>
      <Events>
        <EventList>
          <EventID>1</EventID>
          <EventType>28</EventType>
          <Value>
          </Value>
          <Mode>0</Mode>
          <SubFlowID>"conf_released"</SubFlowID>
          <Param>
          </Param>
        </EventList>
        <EventList>
          <EventID>4</EventID>
          <EventType>26</EventType>
          <Value>
          </Value>
          <Mode>0</Mode>
          <SubFlowID>'conf_play_completed'</SubFlowID>
          <Param>
          </Param>
        </EventList>
        <EventList>
          <EventID>5</EventID>
          <EventType>27</EventType>
          <Value>
          </Value>
          <Mode>0</Mode>
          <SubFlowID>'conf_record_completed'</SubFlowID>
          <Param>
          </Param>
        </EventList>
      </Events>
      <Exit>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1373</target>
        </ExitPort>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1374</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1373</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.create ok return</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
	res_id = utils.make_res_id()
	conf_info = conf_map[conf_id] = conf_map_r[res_id] = {
		'id': id_,
		'res_id': res_id, 
		'conf_id': conf_id,
		'begin_time': now(),
		'end_time': None,
		'parts': [],
	}
	jsonrpc.send_result(sender, id_, {
		'res_id': res_id,
		'user_data': params.get('user_data'),
	})
except IvrError as err:
	TraceErr(err)
	last_err = err
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1374</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.create error result</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
	jsonrpc.send_error(sender, id_)
except IvrError as err:
	TraceErr(err)
	last_err = err
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1389</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.release</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
	try:
		DeleConf(conf_id)
		jsonrpc.send_result(sender, id_)
	except Exception as err:
		jsonrpc.send_error(sender, id_, message='{}'.format(err))
		raise
except IvrError as err:
	TraceErr(err)
	last_err = err
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>
          </target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1432</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.start_play</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
	try:
		StartConfPlay(
			conf_id,
			params['file'],
			mode=int(params.get('is_loop', False))
		)
		jsonrpc.send_result(sender, id_, params.get('record_file'))
	except Exception as err:
		jsonrpc.send_error(sender, id_, message='{}'.format(err))
		raise
except IvrError as err:
	TraceErr(err)
	last_err = err
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1440</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>脚本 conf.stop_play</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
	try:
		StopConfPlay(conf_id)
		jsonrpc.send_result(sender, id_)
	except Exception as err:
		jsonrpc.send_error(sender, id_, message='{}'.format(err))
		raise
except IvrError as err:
	TraceErr(err)
	last_err = err
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1902</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>set_part_voice_mode</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
	try:
		call_info = call_map_r[params['call_res_id']]
		chan = call_info['chan']
		voice_mode = params['mode']
		ChangeConfer(conf_id, chan, voice_mode)
		jsonrpc.send_result(sender, id_)
	except Exception as err:
		jsonrpc.send_error(sender, id_, message='{}'.format(err))
		raise
except IvrError as err:
	TraceErr(err)
	last_err = err
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1949</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>exists</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
	try:
		jsonrpc.send_result(sender, id_, params['res_id'] in call_map_r)
	except Exception as err:
		jsonrpc.send_error(sender, id_, message='{}'.format(err))
		raise
except IvrError as err:
	TraceErr(err)
	last_err = err
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
  <FlowNode>
    <NodeID>1957</NodeID>
    <NodeType>SCRIPT</NodeType>
    <NodeName>get_parts</NodeName>
    <ExtendedProperty>ZoneType=0;ScriptContent=last_err = None
try:
    try:
        errno, chan_list, mode_list, timeout_list = GetConferList(conf_id)
        if errno &lt;= 0:
            raise RuntimeError("GetConferList(conf_id={}) returns {}".format(conf_id, errno))
        parts = []
        for i in range(len(chan_list)):
            chan = chan_list[i]
            call_info = call_map[chan]
            parts.append({
                'res_id': call_info['res_id'],
                'user_data': call_info['params'].get('user_data'),
                'voice_mode': mode_list[i],
            })
        jsonrpc.send_result(sender, id_, parts)
    except Exception as err:
        jsonrpc.send_error(sender, id_, message='{}'.format(err))
        raise
except IvrError as err:
    TraceErr(err)
    last_err = err
</ExtendedProperty>
    <PropertySet>
      <Exit>
        <ExitPort>
          <type>2</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
        <ExitPort>
          <type>1</type>
          <targetflow>
          </targetflow>
          <target>1427</target>
        </ExitPort>
      </Exit>
    </PropertySet>
  </FlowNode>
</root>